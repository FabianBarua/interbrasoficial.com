---
import { ScooterComparison } from "@/components/react/pdf/ScooterComparison";
import { ScooterLista } from "@/components/react/pdf/ScooterLista";
import '@/styles/global.css';


---


<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Scooters</title>
    </head>
    <body class=" w-full max-w-5xl mx-auto py-8">

        <div class="flex justify-between items-center mb-6 px-5">
            <h1 class="text-3xl font-bold text-interbrasGreen-500">CATÁLOGO DE SCOOTERS</h1>
            <button
                class="bg-interbrasGreen-500 hover:bg-interbrasGreen-600 text-white px-5 py-3 rounded-xl text-xl flex gap-3"
                id="downloadCatalog"
            >
                DESCARGAR COMO PDF
                <svg
                    class="w-auto h-6 my-auto fill-white"
                    clip-rule="evenodd"
                    fill-rule="evenodd"
                    stroke-linejoin="round"
                    stroke-miterlimit="2"
                    viewBox="0 0 267 267"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    <g transform="matrix(4.167 0 0 4.167 -666.667 0)">
                        <path d="m213 53h-42v-8c0-.552-.448-1-1-1h-6c-.552 0-1 .448-1 1v10.492c0 3.042 2.466 5.508 5.508 5.508h46.984c3.042 0 5.508-2.466 5.508-5.508 0-4.418 0-10.492 0-10.492 0-.552-.448-1-1-1h-6c-.552 0-1 .448-1 1zm-28-27h-13c-.4 0-.762.238-.919.606-.158.368-.081.794.195 1.084l20 21c.189.198.45.31.724.31s.535-.112.724-.31l20-21c.276-.29.353-.716.195-1.084-.157-.368-.519-.606-.919-.606h-13v-22c0-.552-.448-1-1-1h-12c-.552 0-1 .448-1 1z"></path>
                    </g>
                </svg>
            </button>
        </div>

        <!-- Sección Comparativa -->
        <div class="mb-10">
            <ScooterComparison client:load />
        </div>

        <!-- Lista de Productos -->

        <ScooterLista client:load />
    
        <!-- Loader -->
        <div
            id="loader"
            class="fixed inset-0 bg-black/80 flex justify-center gap-4 items-center z-50 hidden"
        >
            <div class="size-10 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
            <div>
                <p class="text-3xl font-bold text-white">Procesando...</p>
                <div class="flex text-2xl text-white font-bold bg-interbrasGreen-500 w-min px-3 py-1 rounded-xl mt-2">
                    Pagina
                    <span class="ml-2" id="currentPage"> 0 </span>
                    /
                    <span id="totalPages"> 0 </span>
                </div>
            </div>
        </div>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/html-to-image/1.11.11/html-to-image.js"></script>
        <script
            is:inline
            src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js"
            integrity="sha512-z8IYLHO8bTgFqj+yrPyIJnzBDf7DDhWwiEsk4sY+Oe6J2M+WQequeGS7qioI5vT6rXgVRb4K1UVQC5ER7MKzKQ=="
            crossorigin="anonymous"
            referrerpolicy="no-referrer"
        ></script>

        <script is:inline>
            document.getElementById("downloadCatalog").addEventListener("click", convertir);

            async function convertir() {
                try {
                    const loader = document.getElementById("loader");
                    loader.classList.remove("hidden");

                    const currentPage = document.getElementById("currentPage");
                    const totalPages = document.getElementById("totalPages");

                    const productCards = document.querySelectorAll("#product");
                    
                    if (!productCards.length) {
                        alert("No se encontraron productos para exportar");
                        loader.classList.add("hidden");
                        return;
                    }

                    totalPages.textContent = productCards.length;

                    const { PDFDocument } = PDFLib;
                    const pdfDoc = await PDFDocument.create();

                    for (const [index, card] of Array.from(productCards).entries()) {
                        const dataUrl = await htmlToImage.toPng(card, { 
                            pixelRatio: 2,
                            useCORS: true,
                            allowTaint: true
                        });

                        const img = new Image();
                        img.src = dataUrl;

                        await new Promise((resolve, reject) => {
                            img.onload = async function () {
                                try {
                                    const page = pdfDoc.addPage([img.width, img.height]);
                                    const pngImageBytes = await fetch(dataUrl).then((res) => res.arrayBuffer());
                                    const pngImage = await pdfDoc.embedPng(pngImageBytes);
                                    
                                    page.drawImage(pngImage, {
                                        x: 0,
                                        y: 0,
                                        width: img.width,
                                        height: img.height,
                                    });
                                    
                                    currentPage.textContent = index + 1;
                                    resolve();
                                } catch (error) {
                                    console.error("Error procesando imagen:", error);
                                    reject(error);
                                }
                            };
                            
                            img.onerror = function() {
                                console.error("Error cargando imagen");
                                reject(new Error("Error cargando imagen"));
                            };
                        });
                    }

                    const pdfBytes = await pdfDoc.save();
                    const blob = new Blob([pdfBytes], { type: "application/pdf" });
                    const link = document.createElement("a");
                    link.href = URL.createObjectURL(blob);

                    const date = new Date();
                    const day = date.getDate();
                    const month = date.getMonth() + 1;
                    const year = date.getFullYear();

                    link.download = `Scooters-Interbras-${day}-${month}-${year}.pdf`;
                    link.click();

                    loader.classList.add("hidden");
                } catch (error) {
                    console.error("Error al generar PDF:", error);
                    alert("Hubo un error al generar el PDF. Por favor, intenta nuevamente.");
                    const loader = document.getElementById("loader");
                    if (loader) {
                        loader.classList.add("hidden");
                    }
                }
            }
        </script>

    </body>
</html>