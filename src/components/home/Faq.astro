---
import { getI18NGlobal, getValueFromKey } from "@/i18n";
import { FAQs } from "../RichResults.astro"

const {
  currentLocale
} = Astro;
const faqs = FAQs({
  currentLocale
})

const i18n_global = getI18NGlobal({ currentLocale });
const t_global = (key: string) => {
  return getValueFromKey(key, i18n_global);
};

---

<section id="faq">
    <div class="sm:py-20 py-12 container px-10 mx-auto">
      <div class="text-center space-y-4 mx-auto">
        <h2 class="text-lg text-interbrasGreen-500 text-balance  font-semibold tracking-wider uppercase" style="opacity: 1; transform: none;"> FAQ </h2>
        <h3 class="mx-0 mt-4 max-w-lg text-5xl text-balance font-bold sm:max-w-none sm:text-4xl md:text-5xl lg:text-6xl leading-[1.2] tracking-tighter text-foreground lowercase" style="opacity: 1; transform: none;">
          {
            t_global('home.FAQ.title')
          }
        </h3>
      </div>
      <div class="w-full max-w-2xl mx-auto py-10" data-orientation="vertical">

        {
          faqs.map((item, i) => {
            return (
            <div data-state="closed" data-orientation="vertical" class="border-b transition-all">
          <h3 data-orientation="vertical" data-state="closed" class="flex">
            <button type="button" aria-controls={`FAC-${i}`} aria-expanded="false" data-state="closed" data-orientation="vertical" id={`FAC-${i}-${i}`}  class="flex flex-1 items-center justify-between py-4 font-medium transition-all [&[data-state=open]>svg]:rotate-180 text-left hover:no-underline" data-radix-collection-item="">
              {
                item.question
              }
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-chevron-down h-4 w-4 shrink-0 transition-transform duration-200">
                    <path d="m6 9 6 6 6-6"></path>
                </svg>
            </button>
          </h3>
          <div data-state="closed" id={`FAC-${i}`}  role="region" aria-labelledby={`FAC-${i}-${i}`}  data-orientation="vertical" class=" transition-all overflow-hidden text-sm  data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down" style="height:0px">
            <div class="pb-4 pt-0">
                <span>
                  {
                    item.answer
                  } 
                </span>
            </div>
          </div>
        </div>
            )
          })
        }

      </div>
    </div>
  </section>

<script>

  const initFaq =  () => {

    // Selecciona todos los botones de las preguntas frecuentes
    const faqButtons = document.querySelectorAll("#faq button");

    faqButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const content = document.getElementById(
          button?.getAttribute("aria-controls")!
        );
        const isOpen = button.getAttribute("aria-expanded") === "true";

        // Cambia el estado aria-expanded y el data-state del botón
        button.setAttribute("aria-expanded", (!isOpen).toString());
        button.setAttribute("data-state", isOpen ? "closed" : "open");

        // Cambia el estado data-state y el estilo del contenido
        if (content) {
          content.setAttribute("data-state", isOpen ? "closed" : "open");
          // Muestra o esconde el contenido
          content.style.height = isOpen ? "0px" :`${content.scrollHeight}px`;
        }

        // close all other faqs

        faqButtons.forEach((faqButton) => {
          if (faqButton !== button) {

            const svgIcon = faqButton.querySelector("svg");
            if (svgIcon) {
              svgIcon.style.transform = "rotate(0)";
            }

            const otherContent = document.getElementById(
              faqButton.getAttribute("aria-controls")!
            );
            faqButton.setAttribute("aria-expanded", "false");
            faqButton.setAttribute("data-state", "closed");
            if (otherContent) {
              otherContent.setAttribute("data-state", "closed");
              otherContent.style.height = "0px";
            }
          }
        })

        // Rotación del ícono
        const svgIcon = button.querySelector("svg");
        if (svgIcon) {
          svgIcon.style.transform = isOpen
            ? "rotate(0)"
            : "rotate(180deg)";
        }
      });
    });
  }

  document.addEventListener("astro:page-load", initFaq);
</script>
