---
import { getI18NProducts, getValueFromKey, getI18NCatalog } from "@/i18n";
import { cn } from "@/shared/tailwind";
import { InteractiveGridPattern } from "../react/catalogo/InteractiveGridPattern";

import { CatalogoSection } from "../react/catalogo/CatalogoSection";
import { HeroProvider } from "../react/catalogo/Provider";

const { currentLocale } = Astro;
const i18n = getI18NProducts({ currentLocale });
const i18n_catalog = getI18NCatalog({ currentLocale });

const t = (key: string) => getValueFromKey(key, i18n);
const t_catalog = (key: string) => getValueFromKey(key, i18n_catalog);
---

<div class="flex">
  <InteractiveGridPattern
    client:only
    className={cn(
      "[mask-image:radial-gradient(400px_circle_at_center,white,transparent)] -mt-40"
    )}
    width={20}
    height={20}
    squares={[80, 80]}
    squaresClassName="hover:fill-interbrasGreen-500"
  />

  <div class="flex-1 justify-center items-end pr-20 flex-col hidden lg:flex">
    <img
      src="/1.png"
      alt="recopilacion de productos"
      class="h-[500px] object-contain -rotate-12 scale-90 fade"
    />
  </div>
  <div
    class="flex justify-center items-center flex-col h-[500px] my-9 gap-5 pointer-events-none relative z-20 mx-auto"
  >
    <div class="flex flex-col items-center gap-4 mx-auto">
      <h1 class="text-5xl font-bold text-center">
        {t_catalog("title")}
      </h1>

      <h2 class="text-xl text-center">
        {t_catalog("subtitle")}
      </h2>
    </div>

    <button
      class="bg-interbrasGreen-500 hover:bg-interbrasGreen-600 text-white px-5 py-2 rounded-xl text-xl flex gap-3 pointer-events-auto"
      id="downloadCatalog"
    >
      {t_catalog("download")}

      <svg
        class="w-auto h-6 my-auto fill-white"
        clip-rule="evenodd"
        fill-rule="evenodd"
        stroke-linejoin="round"
        stroke-miterlimit="2"
        viewBox="0 0 267 267"
        xmlns="http://www.w3.org/2000/svg"
        id="fi_12262500"
        ><g transform="matrix(4.167 0 0 4.167 -666.667 0)"
          ><path
            d="m213 53h-42v-8c0-.552-.448-1-1-1h-6c-.552 0-1 .448-1 1v10.492c0 3.042 2.466 5.508 5.508 5.508h46.984c3.042 0 5.508-2.466 5.508-5.508 0-4.418 0-10.492 0-10.492 0-.552-.448-1-1-1h-6c-.552 0-1 .448-1 1zm-28-27h-13c-.4 0-.762.238-.919.606-.158.368-.081.794.195 1.084l20 21c.189.198.45.31.724.31s.535-.112.724-.31l20-21c.276-.29.353-.716.195-1.084-.157-.368-.519-.606-.919-.606h-13v-22c0-.552-.448-1-1-1h-12c-.552 0-1 .448-1 1z"
          ></path></g
        ></svg
      >
    </button>
  </div>

  <div class="flex-1 justify-center items-start pr-20 flex-col hidden lg:flex">
    <img
      src="/2.png"
      alt="recopilacion de productos"
      class="h-[500px] object-contain rotate-12 scale-90 fade"
    />
  </div>
</div>

<HeroProvider client:only>
  <CatalogoSection client:only currentLocale={currentLocale || "es"} />
</HeroProvider>

<div
  id="loader"
  class="fixed inset-0 bg-black/80 flex justify-center gap-4 items-center z-50 hidden"
>
  <div
    class="size-10 border-4 border-white border-t-transparent rounded-full animate-spin"
  >
  </div>
  <div class="">
    <p class="text-3xl font-bold text-white">Generando PDF...</p>
    <div
      class="flex text-2xl text-white font-bold bg-interbrasGreen-500 w-min px-3 py-1 rounded-xl mt-2"
    >
      Pagina
      <span class="ml-2" id="totalPages"> 0 </span>
      /
      <span id="currentPage"> 0 </span>
    </div>
  </div>
</div>

<script
  src="https://cdnjs.cloudflare.com/ajax/libs/html-to-image/1.11.11/html-to-image.js"
></script>

<script
  is:inline
  src="https://cdnjs.cloudflare.com/ajax/libs/pdf-lib/1.17.1/pdf-lib.min.js"
  integrity="sha512-z8IYLHO8bTgFqj+yrPyIJnzBDf7DDhWwiEsk4sY+Oe6J2M+WQequeGS7qioI5vT6rXgVRb4K1UVQC5ER7MKzKQ=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"></script>

<script is:inline>
  document
    .getElementById("downloadCatalog")
    .addEventListener("click", convertir);

  async function convertir() {
    const catalog = document.getElementById("catalog");

    if (!catalog) {
      alert("No se ha encontrado el catalogo o no se ha cargado correctamente");
      return;
    }

    catalog.classList.remove("hidden");

    const loader = document.getElementById("loader");
    loader.classList.remove("hidden");

    const currentPage = document.getElementById("currentPage");
    const totalPages = document.getElementById("totalPages");

    const catalogSections = document.querySelectorAll("#catalogSection");
    const hiddenItems = document.querySelectorAll('[data-hide="true"]');
    const eyeIcons = document.querySelectorAll('[data-eye]');
    hiddenItems.forEach((el) => (el.style.display = 'none'));
    eyeIcons.forEach((el) => (el.style.display = 'none'));
    totalPages.textContent = catalogSections.length;

    const { PDFDocument } = PDFLib;
    const pdfDoc = await PDFDocument.create();

    for (const section of catalogSections) {
      const node = section;
      node.classList.remove("rounded-[50px]");
      const dataUrl = await htmlToImage.toPng(node, { pixelRatio: 2 });
      node.classList.add("rounded-[50px]");

      const img = new Image();
      img.src = dataUrl;

      await new Promise((resolve) => {
        img.onload = async function () {
          const page = pdfDoc.addPage([img.width, img.height]);
          const pngImageBytes = await fetch(dataUrl).then((res) =>
            res.arrayBuffer()
          );
          const pngImage = await pdfDoc.embedPng(pngImageBytes);
          page.drawImage(pngImage, {
            x: 0,
            y: 0,
            width: img.width,
            height: img.height,
          });
          currentPage.textContent = pdfDoc.getPageCount();
          resolve(); // Esto asegura que el bucle espere a que `onload` termine
        };
      });
    }

    hiddenItems.forEach((el) => (el.style.display = ''));
    eyeIcons.forEach((el) => (el.style.display = ''));

    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);

    const date = new Date();
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();

    link.download = `Catalogo Interbras ${day}-${month}-${year}.pdf`;

    link.click();

    loader.classList.add("hidden");
  }
</script>

<style is:global>
  .fade {
    opacity: 0;
    animation: fadeIn .3s forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
      transform: translate(0);
    }
  }
</style>
